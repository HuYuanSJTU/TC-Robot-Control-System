<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4020.12">
  <POU Name="Axis" Id="{752ec826-01be-4872-838e-fdec6a999a4b}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK Axis
//VAR_INPUT	
//END_VAR
VAR_OUTPUT
	Axis_Error			: BOOL;				// Error signal
	Axis_ErrorID		: UDINT;			// Error ID
	Axis_Moves			: BOOL;				// Status of moving
END_VAR
VAR
	// =============== Done signals MC Block =================
	JogDone			    : BOOL;					// Status of function block MC_Jog
	ResetDone		    : BOOL;					// Status of function block MC_Reset
	HaltDone		    : BOOL;					// Status of function block MC_Halt
	HomeDone		    : BOOL;					// Status of function block MC_Home
  MoveAbsoluteDone : BOOL;        // Status of function block MC_MoveAbsolute
  ExtSetPiontDone 	: BOOL;         		// Status of function block MC_ExtSetPointGenDisable

	// =============== Control variables ======================
	//Home_Back_Start	: BOOL;
	//Drive_Home		: BOOL;
	
	// =============== State variables ========================
	Power_StatusEnable	: BOOL;					// Enable feedback
	
	// =============== Velocity, override =====================
	Velocity_Jog		: LREAL;				// Jog velocity
	Velocity_Move		: LREAL;				// Target velocity
	Velocity_Home		: LREAL;				// Home1 velocity
  Velocity_Home2    : LREAL;        // Home1 velocity   
	Velocity_Absolute	: LREAL;				// MoveAbsolute velocity
	Velocity_Relative	: LREAL;				// MoveRelative velocity
	fOverride 			: LREAL := 100.0;		// Override 100%
	
	// =============== Trigger function blocks ================
	
	TriggerHalt	: R_TRIG;				// Trigger to recognize rising edge of halt input
	TriggerReset : R_TRIG;				// Trigger to recognize rising edge of reset input
	
	// =============== Axis reference =========================
	AxisRef			: AXIS_REF;				// Axis reference (process data plc/nc)
	
	// =============== About axis turque ====================
	Axis_Current_Turque 	: INT;
  	Axis_Max_Turque       	: INT;
	// ================= Sensor FeedBack ====================
  Proximity_Switch      : DINT;
  
	// =============== Motion function blocks =================
	Axis_Power 			: MC_Power;				// FB for enable and override			[上电]
	Axis_Home			: MC_Home;				// FB for axis home						[找零]
	Axis_Reset 			: MC_Reset;				// FB to reset axis						[复位]
	Axis_Jog			: MC_Jog;				// FB to jog axis						[点动]
	Axis_Stop 			: MC_Stop;				// FB to stop axis						[停止]
	Axis_Halt			: MC_Halt;				// FB to halt axis						[停止]
	Axis_Move			: MC_MoveVelocity;		// FB to move axis (velocity movement)	[匀速运动]
	Axis_MoveAbsolute 	: MC_MoveAbsolute;		// FB to move axis absolutely			[绝对位置运动]
	Axis_MoveRelative	: MC_MoveRelative;		// FB to move axis relatively			[相对位置运动]
  	Axis_ActPosition  : MC_ReadActualPosition; // FB to read the actual position of axis  [读取电机轴的实际位置]
	Axis_Delay			: Delay;				// FB to operate the delay program		[延迟程序]
	Axis_ExtSetPiontEnable	: MC_ExtSetPointGenEnable;	// FB to enable extsetpoint		[外部函数发生使能]
	Axis_ExtSetPiontDisable	: MC_ExtSetPointGenDisable;	// FB to disable extsetpoint	[外部函数结束使能]
  
  // =============== Timer =================
  Delay         : TON;          //[定时器]
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Property Name="ActPosition" Id="{3015e613-88a6-44b7-bfd3-2c06df6f075d}">
      <Declaration><![CDATA[PROPERTY ActPosition : LREAL]]></Declaration>
      <Get Name="Get" Id="{a1550c61-e344-45b9-84a9-b4c92d3e44f5}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Axis_ActPosition( Axis:= AxisRef, Enable:= TRUE );
ActPosition := Axis_ActPosition.Position;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Current_Turque_Value" Id="{3a2f771d-3376-4640-bd97-650af6e34455}">
      <Declaration><![CDATA[PROPERTY Current_Turque_Value : INT]]></Declaration>
      <Get Name="Get" Id="{cf61b5f8-2ee8-4892-af0b-6df01ee01050}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Current_Turque_Value := Axis_Current_Turque;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{454d6b57-9848-48a1-bdc6-2e4c4bcfbc97}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Axis_Current_Turque := Current_Turque_Value;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="ExtSetPoint" Id="{e3dd3d6b-d150-49a2-a8d7-a7990a606e4c}">
      <Declaration><![CDATA[METHOD ExtSetPoint
VAR_INPUT
	Drive_ExtSetPointEnable 	: BOOL;		// 使能外部信号开始信号
	Drive_ExtSetPointDisable 	: BOOL;		// 使能外部信号结束信号
	ExSetPosition				: LREAL;	// 外部信号位置
	//Axis_Current_Turque 		: INT;		// 边界条件：丝杠位置到达两端卡死
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// =======================外部信号发生程序==========================

IF NOT Axis_ExtSetPiontEnable.Error THEN
	Axis_ExtSetPiontEnable(	Axis:= AxisRef, 
							Execute:= Drive_ExtSetPointEnable, 
							Position:= ExSetPosition, 
							PositionType:= POSITIONTYPE_ABSOLUTE );
END_IF

IF Axis_ExtSetPiontEnable.Done THEN
	ExtSetPiontDone := 1;
	MC_ExtSetPointGenFeed(	Position:= ExSetPosition, 
							Velocity:= 10, 
							Acceleration:= 10, 
							Direction:= 1, 		// 1 = positive direction
							Axis:= AxisRef );
END_IF	

IF NOT Axis_ExtSetPiontDisable.Error THEN 
	Axis_ExtSetPiontDisable(	Axis:= AxisRef, 
								Execute:= Drive_ExtSetPointDisable);
END_IF
								
IF Axis_ExtSetPiontEnable.Error OR Axis_ExtSetPiontDisable.Error OR ABS(Axis_Current_Turque) > Axis_Max_Turque THEN
	IF Axis_ExtSetPiontEnable.Error OR Axis_ExtSetPiontDisable.Error THEN
		Axis_Error		:= TRUE;
		Axis_ErrorID 	:= Axis_Home.ErrorID;
	END_IF
	Axis_ExtSetPiontEnable(	Axis:= AxisRef, 
							Execute:= 0 );
	Axis_ExtSetPiontDisable(	Axis:= AxisRef, 
								Execute:= 1);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Halt" Id="{d7ff254f-2dd7-462f-bdbd-9197c2ffdaa3}">
      <Declaration><![CDATA[METHOD Halt : BOOL
VAR_INPUT
	DriveHalt		: BOOL;					// Request stop
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// =======================电机运动停止程序==========================

IF DriveHalt THEN
	// Move Execute FALSE
	Axis_Move(	Execute	:= FALSE,
				Axis 	:= AxisRef);
ELSE
	// Reset done signal
	HaltDone := FALSE;
END_IF

// Trigger
TriggerHalt(CLK := DriveHalt);

IF TriggerHalt.Q THEN
	Axis_Halt(	Execute	:= TRUE,
				Axis 	:= AxisRef);
ELSE
	Axis_Halt(Axis := AxisRef);
END_IF

// Done / Error / Command aborted
IF Axis_Halt.Done OR Axis_Halt.Error OR Axis_Halt.CommandAborted THEN
	Axis_Error		:= Axis_Halt.Error;
	Axis_ErrorID 	:= Axis_Halt.ErrorID;
	HaltDone 		:= Axis_Halt.Done;
	
	Axis_Move(	Execute	:= FALSE,
				Axis 	:= AxisRef);
				
	Axis_Halt(	Execute	:= FALSE,
				Axis 	:= AxisRef);
END_IF

// =========================================================]]></ST>
      </Implementation>
    </Method>
    <Method Name="Home" Id="{313e1eef-e597-492a-a006-a8453e584cfd}">
      <Declaration><![CDATA[METHOD Home
VAR_INPUT
	//Back_Start 				: BOOL;
	//Velocity_Home	:LREAL;
	//Axis_Current_Turque 	: INT;
	Drive_Home				: BOOL;
END_VAR

VAR
	HomeSet					: BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// =======================找零程序==========================
// 找零程序过程为：先让丝杠回退，到达机械限位后停止,并用程序将该位置置为零位

//======================丝杠回退========================
Jog_Backward(Drive_Jog_Backward:= Drive_Home);
Jog_Velocity := Velocity_Home;
	
IF NOT Axis_Home.Error THEN
	IF ABS(Axis_Current_Turque) > Axis_Max_Turque AND NOT HomeDone THEN
		Drive_Home :=0;
		Jog_Backward(Drive_Jog_Backward:= Drive_Home);
		Delay(IN:= NOT Delay.Q, PT:=T#200MS, Q=> , ET=> );
		Axis_Home( 	Axis:= AxisRef, 
					Execute:= Delay.Q, 
					Position:= 0, 
					HomingMode:= MC_Direct);
		HomeDone := Axis_Home.Done;
	END_IF
	IF HomeDone THEN
		Move_Absolute(Drive_Move_Absolute:= TRUE, Absolute_Position:= 10 );
		IF Axis_MoveAbsolute.Done THEN
			HomeDone := FALSE;
		END_IF
	END_IF
END_IF

(*IF HomeSet THEN
	Jog_Backward(Drive_Jog_Backward:= 0,  Axis_Current_Turque:= Axis_Current_Turque);
	HomeDone := 1;
END_IF*)

IF Axis_Home.Error OR Axis_Home.CommandAborted OR ABS(Axis_Current_Turque) < Axis_Max_Turque THEN
	IF Axis_Jog.Error THEN
		Axis_Error		:= TRUE;
		Axis_ErrorID 	:= Axis_Home.ErrorID;
	END_IF
	Axis_Home( 	Axis:= AxisRef, 
				Execute:= FALSE);
END_IF

// =========================================================]]></ST>
      </Implementation>
    </Method>
    <Property Name="Home_Velocity" Id="{075d0823-6614-4698-9d00-5a9266b58e8c}">
      <Declaration><![CDATA[PROPERTY Home_Velocity : LREAL]]></Declaration>
      <Get Name="Get" Id="{337c8281-9e84-4066-80f8-1804a324ddb1}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Home_Velocity := Velocity_Home;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{28f71fe8-0908-4a45-b6fa-862d0622a7a8}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Velocity_Home := Home_Velocity;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="Home2" Id="{538e8ca7-d46b-41f9-930c-142666bfb84c}">
      <Declaration><![CDATA[METHOD Home2 : BOOL
VAR_INPUT
	Drive_Home		: BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// =======================找零程序==========================
// 找零程序过程为：先让丝杠回退，当传感器检测到金属表面并反馈信号后, 程序将该位置置为零位

//======================丝杠回退========================
Jog_Backward(Drive_Jog_Backward:= Drive_Home);
Jog_Velocity := Velocity_Home2;
	
IF NOT Axis_Home.Error THEN
	IF ABS(Proximity_Switch) = 64028672 AND NOT HomeDone THEN
		Drive_Home :=0;
		Jog_Backward(Drive_Jog_Backward:= Drive_Home);
		Delay(IN:= NOT Delay.Q, PT:=T#200MS, Q=> , ET=> );
		Axis_Home( 	Axis:= AxisRef, 
					Execute:= Delay.Q,
					Position:= 0, 
					HomingMode:= MC_Direct);
		HomeDone := Axis_Home.Done;
	END_IF
	IF HomeDone THEN
		Move_Absolute(Drive_Move_Absolute:= TRUE, Absolute_Position:= 20);
		IF Axis_MoveAbsolute.Done THEN
			HomeDone := FALSE;
		END_IF
	END_IF
END_IF

(*IF HomeSet THEN
	Jog_Backward(Drive_Jog_Backward:= 0,  Axis_Current_Turque:= Axis_Current_Turque);
	HomeDone := 1;
END_IF*)

IF Axis_Home.Error OR Axis_Home.CommandAborted OR ABS(Axis_Current_Turque) < Axis_Max_Turque THEN
	IF Axis_Jog.Error THEN
		Axis_Error		:= TRUE;
		Axis_ErrorID 	:= Axis_Home.ErrorID;
	END_IF
	Axis_Home( 	Axis:= AxisRef, 
				Execute:= FALSE);
END_IF

// =========================================================]]></ST>
      </Implementation>
    </Method>
    <Property Name="Home2_Velocity" Id="{29542bf1-ba67-49a9-803d-762403c92f58}">
      <Declaration><![CDATA[PROPERTY Home2_Velocity : LREAL]]></Declaration>
      <Get Name="Get" Id="{fe78f786-10a8-4f98-9e65-95fb7c4427c2}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Home2_Velocity := Velocity_Home2;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{7e1f886e-1b8d-4d9a-9fc1-c6d7443f0295}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Velocity_Home2 := Home2_Velocity;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="Jog_Backward" Id="{99d13956-4937-48a4-92d1-297e5120f462}">
      <Declaration><![CDATA[METHOD Jog_Backward
VAR_INPUT
	Drive_Jog_Backward	: BOOL;				//点动后退使能信号
	//Velocity_Jog		: LREAL;			//点动速度
	//Axis_Current_Turque : INT;				//边界条件：丝杠位置到达两端卡死
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// =======================点动后退==========================
// 点动后退用在找零中的位置移动

IF NOT Axis_Jog.Error THEN
	Axis_Jog( 	Axis:= AxisRef, 
				JogForward:= 0, 
				JogBackwards:= Drive_Jog_Backward, 
				Mode:= MC_JOGMODE_CONTINOUS, 
				Velocity:= Velocity_Jog);
END_IF

IF Axis_Jog.Error OR Axis_Jog.CommandAborted OR ABS(Axis_Current_Turque) > Axis_Max_Turque THEN
	IF Axis_Jog.Error THEN
		Axis_Error		:= TRUE;
		Axis_ErrorID 	:= Axis_Jog.ErrorID;
	END_IF
	
	Axis_Jog(	JogForward:= 0, 
				JogBackwards:= 0, 
				Axis := AxisRef);
END_IF

(*IF ABS(Axis_Current_Turque) <1000 AND JogDone =1 THEN
	Axis_Jog(	JogForward:= 0, 
				JogBackwards:= 0, 
				Axis := AxisRef);
	JogDone :=0;
END_IF*)
				
// =========================================================]]></ST>
      </Implementation>
    </Method>
    <Method Name="Jog_Forward" Id="{9deceb4f-22e3-43d3-abba-cc65da0a988f}">
      <Declaration><![CDATA[METHOD Jog_Forward : BOOL
VAR_INPUT
	Drive_Jog_Forward	: BOOL;				//点动前进使能信号
	//Velocity_Jog		: LREAL;			//点动速度
	//Axis_Current_Turque : INT;				//边界条件：丝杠位置到达两端卡死
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// =======================点动前进==========================


IF NOT Axis_Jog.Error THEN
	Axis_Jog( 	Axis:= AxisRef, 
				JogForward:= Drive_Jog_Forward, 
				JogBackwards:= 0, 
				Mode:= MC_JOGMODE_CONTINOUS, 
				Velocity:= Velocity_Jog);
END_IF

IF Axis_Jog.Error OR Axis_Jog.CommandAborted OR ABS(Axis_Current_Turque) > Axis_Max_Turque THEN
	IF Axis_Jog.Error THEN
		Axis_Error		:= TRUE;
		Axis_ErrorID 	:= Axis_Jog.ErrorID;
	END_IF
	
	Axis_Jog(	JogForward:= 0, 
				JogBackwards:= 0, 
				Axis := AxisRef);
END_IF

(*IF ABS(Axis_Current_Turque) <1000 AND JogDone =1 THEN
	Axis_Jog(	JogForward:= 0, 
				JogBackwards:= 0, 
				Axis := AxisRef);
	JogDone :=0;
END_IF*)
				
// =========================================================]]></ST>
      </Implementation>
    </Method>
    <Property Name="Jog_Velocity" Id="{fbf70f23-ccbc-42f7-9290-364343308531}">
      <Declaration><![CDATA[// =======================读写点动程序中的速度值==========================

PROPERTY Jog_Velocity : LREAL]]></Declaration>
      <Get Name="Get" Id="{777f885d-c13b-46bb-a81c-11c9d0c034b5}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Jog_Velocity := Velocity_Jog;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{3493f918-b8b5-4bfd-88eb-49ef90625a72}">
        <Declaration><![CDATA[
VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Velocity_Jog := Jog_Velocity;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="Max_Turque_Value" Id="{c8624b49-e9f6-4c92-b644-367354523826}">
      <Declaration><![CDATA[PROPERTY Max_Turque_Value : INT]]></Declaration>
      <Set Name="Set" Id="{d52428b7-2c03-4786-a6ff-9fe9a6b65b24}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Axis_Max_Turque := Max_Turque_Value;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="Move_Absolute" Id="{90058d1c-d052-4ccf-9289-5faf8ddb84ca}">
      <Declaration><![CDATA[METHOD Move_Absolute
VAR_INPUT
	Drive_Move_Absolute : BOOL;				// 运动使能信号
	Absolute_Position	: LREAL;			// 绝对运动位置
	//Move_Velocity		: LREAL;			// 运动速度
	//Axis_Current_Turque : INT;			// 边界条件：丝杠位置到达两端卡死
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// =======================绝对运动==========================

IF NOT Axis_MoveAbsolute.Error THEN
	Axis_MoveAbsolute(	Axis:= AxisRef, 
						Execute:= Drive_Move_Absolute, 
						Position:= Absolute_Position, 
						Velocity:= Velocity_Absolute, 
						BufferMode:= MC_Aborting );
	MoveAbsoluteDone := Axis_MoveAbsolute.Done;			// 运动到指定位置后置位
END_IF

IF Axis_MoveAbsolute.Error OR Axis_MoveAbsolute.CommandAborted OR ABS(Axis_Current_Turque) > Axis_Max_Turque THEN
	IF Axis_MoveAbsolute.Error THEN
		Axis_Error		:= TRUE;
		Axis_ErrorID 	:= Axis_MoveAbsolute.ErrorID;
	END_IF
	
	Axis_MoveAbsolute(	Axis:= AxisRef, 
						Execute:= 0, 
						BufferMode:= MC_Aborting);
END_IF

// =========================================================]]></ST>
      </Implementation>
    </Method>
    <Property Name="Move_Absolute_Velocity" Id="{7cb9ac45-b7a3-4012-b6de-6d6ce49b5a54}">
      <Declaration><![CDATA[// =======================读写绝对运动程序中的速度值==========================

PROPERTY Move_Absolute_Velocity : LREAL]]></Declaration>
      <Get Name="Get" Id="{69b3b0a0-70e4-4a5d-b413-ab7229a2e9bd}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Move_Absolute_Velocity := Velocity_Absolute;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{226c6ce0-f119-45e3-aed2-044f6ed96e56}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Velocity_Absolute := Move_Absolute_Velocity;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="Move_Backward" Id="{d07db03f-d706-432b-92a0-251009b4d606}">
      <Declaration><![CDATA[METHOD Move_Backward
VAR_INPUT
	Move_Backward_Start : BOOL;					//匀速后退使能信号
	//Axis_Current_Turque : INT;					//边界条件：丝杠位置到达两端卡死
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// =======================匀速后退==========================

// Not error
IF NOT Axis_Move.Error THEN
	Axis_Move(	Execute 	:= Move_Backward_Start,
				Velocity 	:= Velocity_Move,
				Direction 	:= MC_Negative_Direction,
				Axis 		:= AxisRef );
END_IF

// Error / Command aborted
IF Axis_Move.Error OR Axis_Move.CommandAborted OR ABS(Axis_Current_Turque) > Axis_Max_Turque THEN
	IF Axis_Move.Error THEN
		Axis_Error		:= TRUE;
		Axis_ErrorID 	:= Axis_Move.ErrorID;
	END_IF
	
	Axis_Move(	Execute	:= FALSE,
				Axis 	:= AxisRef);
END_IF

// =========================================================]]></ST>
      </Implementation>
    </Method>
    <Method Name="Move_Fordward" Id="{30d70636-f830-44c4-adf2-54f90ee067a6}">
      <Declaration><![CDATA[METHOD Move_Fordward
VAR_INPUT
	Move_Forward_Start : BOOL;					//匀速前进使能信号
	//Axis_Current_Turque : INT;					//边界条件：丝杠位置到达两端卡死
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// =======================匀速前进==========================

// Not error
IF NOT Axis_Move.Error THEN
	Axis_Move(	Execute 	:= Move_Forward_Start,
				Velocity 	:= Velocity_Move,
				Direction 	:= MC_Positive_Direction,
				Axis 		:= AxisRef );
END_IF

// Error / Command aborted
IF Axis_Move.Error OR Axis_Move.CommandAborted OR ABS(Axis_Current_Turque) > Axis_Max_Turque THEN
	IF Axis_Move.Error THEN
		Axis_Error		:= TRUE;
		Axis_ErrorID 	:= Axis_Move.ErrorID;
	END_IF
	
	Axis_Move(	Execute	:= FALSE,
				Axis 	:= AxisRef);
END_IF

// =========================================================]]></ST>
      </Implementation>
    </Method>
    <Method Name="Move_Relative" Id="{7b541efd-c3a2-463f-9025-d3f3cd116050}">
      <Declaration><![CDATA[METHOD Move_Relative
VAR_INPUT
	Drive_Move_Relative		: BOOL;				// 运动使能信号
	Relative_Position		: LREAL;			// 相对运动位置
	//Move_Velocity			: LREAL;			// 运动速度
	//Axis_Current_Turque 	: INT;				// 边界条件：丝杠位置到达两端卡死
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// =======================相对运动==========================

IF NOT Axis_MoveRelative.Error THEN
	Axis_MoveRelative(	Axis:= AxisRef, 
						Execute:= Drive_Move_Relative, 
						Distance:= Relative_Position, 
						Velocity:= Velocity_Relative, 
						BufferMode:= MC_Aborting );
END_IF

IF Axis_MoveRelative.Error OR Axis_MoveRelative.CommandAborted OR ABS(Axis_Current_Turque) > Axis_Max_Turque THEN
	IF Axis_MoveRelative.Error THEN
		Axis_Error		:= TRUE;
		Axis_ErrorID 	:= Axis_MoveRelative.ErrorID;
	END_IF
	
	Axis_MoveRelative(	Axis:= AxisRef, 
						Execute:= 0, 
						BufferMode:= MC_Aborting);
END_IF

// =========================================================]]></ST>
      </Implementation>
    </Method>
    <Property Name="Move_Relative_Velocity" Id="{10d568b7-1224-4f3c-82dc-f2b473343afd}">
      <Declaration><![CDATA[// =======================读写相对运动程序中的速度值==========================

PROPERTY Move_Relative_Velocity : LREAL]]></Declaration>
      <Get Name="Get" Id="{348afd78-8fc2-4019-a44e-c1c1383e294e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Move_Relative_Velocity := Velocity_Relative;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{5825f81f-4221-4e2d-a800-e81839a342ef}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Velocity_Relative := Move_Relative_Velocity;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="Move_Velocity" Id="{21dc1ad2-a805-4cc5-ba52-5eb4a3378ad2}">
      <Declaration><![CDATA[PROPERTY Move_Velocity : LREAL]]></Declaration>
      <Get Name="Get" Id="{1866d0e7-3c70-4d48-8eca-a37834a3ae08}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Move_Velocity := Velocity_Move;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{22390785-422b-4fe3-a5a7-2a060fc5e62a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Velocity_Move :=Move_Velocity :=10;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="Power" Id="{cc0985ad-b04b-4e99-b924-c7a9a3e5739c}">
      <Declaration><![CDATA[METHOD Power
VAR_INPUT
	Axis_Enable : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// =======================上电程序==========================

Axis_Power(	Enable 			:= Axis_Enable, 
			Enable_Positive	:= Axis_Enable, 
			Enable_Negative	:= Axis_Enable, 
			Override		:= fOverride,
			Axis			:= AxisRef,
			Status			=> Power_StatusEnable);
			
IF Axis_Power.Error THEN
	Axis_Error		:= TRUE;
	Axis_ErrorID 	:= Axis_Power.ErrorID;
END_IF

AxisRef.ReadStatus();

Axis_Moves := AxisRef.Status.Moving;

// ==========================================================]]></ST>
      </Implementation>
    </Method>
    <Property Name="Proximity_Switch_FeedBack" Id="{266d5a90-626e-4237-baca-31f21f0c8e8c}">
      <Declaration><![CDATA[PROPERTY Proximity_Switch_FeedBack : DINT]]></Declaration>
      <Set Name="Set" Id="{4caf84bf-6035-4fe8-8acd-b0890ff2a20e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Proximity_Switch := Proximity_Switch_FeedBack;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="Reset" Id="{dedc8057-c4ab-4248-b14b-274fa3c9288f}">
      <Declaration><![CDATA[METHOD Reset
VAR_INPUT
	Drive_Reset		: BOOL;					// Request reset
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// =====================驱动重置程序==========================

IF NOT Drive_Reset THEN
	ResetDone 	:= FALSE;
END_IF

// Trigger(触发器)
TriggerReset(CLK := Drive_Reset);

IF TriggerReset.Q THEN
	HaltDone 	:= FALSE;
	
	Axis_Reset(Execute := TRUE, Axis := AxisRef);
ELSE
	Axis_Reset(Axis := AxisRef);
END_IF

// Done / Error
IF Axis_Reset.Done OR Axis_Reset.Error THEN
	Axis_Error		:= Axis_Reset.Error;
	Axis_ErrorID 	:= Axis_Reset.ErrorID;
	ResetDone 		:= Axis_Reset.Done;

	Axis_Reset(	Execute	:= FALSE, Axis 	:= AxisRef);
END_IF

// =========================================================]]></ST>
      </Implementation>
    </Method>
    <Property Name="State_ExtSetPiontDone" Id="{6243132d-fdac-4a44-aabc-1626db2c504e}">
      <Declaration><![CDATA[PROPERTY State_ExtSetPiontDone : BOOL]]></Declaration>
      <Get Name="Get" Id="{707129e4-107c-4490-bb7b-c4d081868570}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[State_ExtSetPiontDone := ExtSetPiontDone;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="State_HomeDone" Id="{b05cc381-4a45-4536-92f9-829385d416fe}">
      <Declaration><![CDATA[// =======================回零结束信号==========================

PROPERTY State_HomeDone : BOOL]]></Declaration>
      <Get Name="Get" Id="{264bc084-d205-492c-afbe-d826e47ed36b}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[State_HomeDone := HomeDone;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="State_JogDone" Id="{3c0f115e-f80a-44b9-a70e-39bb83e64c81}">
      <Declaration><![CDATA[// =======================点动结束信号==========================

PROPERTY State_JogDone : BOOL]]></Declaration>
      <Get Name="Get" Id="{0fe6b904-9b2c-4f79-ad95-929babff25cb}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[State_JogDone := JogDone;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="State_MoveAbsoluteDone" Id="{7b7a8b76-a437-47fb-99a9-6a9d632d1395}">
      <Declaration><![CDATA[PROPERTY State_MoveAbsoluteDone : BOOL]]></Declaration>
      <Get Name="Get" Id="{c74d3577-a7ec-4111-94f6-46d87e085a5c}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[State_MoveAbsoluteDone := MoveAbsoluteDone;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="State_PowerStatus" Id="{26f2d544-ee3f-4b26-afb9-71118906e7d1}">
      <Declaration><![CDATA[// =======================上电状态信号==========================

PROPERTY State_PowerStatus : BOOL]]></Declaration>
      <Get Name="Get" Id="{f32eea30-ecfd-40aa-98ad-396678666aa2}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[State_PowerStatus := Power_StatusEnable;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="State_ResetDone" Id="{e8bc9f4f-5bd7-4f76-a8c5-8b726ec5b1c8}">
      <Declaration><![CDATA[// =======================复位结束信号==========================

PROPERTY State_ResetDone : BOOL]]></Declaration>
      <Get Name="Get" Id="{305c7aa0-f515-4867-a0e8-4b3fd35a9f3f}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[State_ResetDone := ResetDone;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <LineIds Name="Axis">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Axis.ActPosition.Get">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Axis.Current_Turque_Value.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Axis.Current_Turque_Value.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Axis.ExtSetPoint">
      <LineId Id="3" Count="31" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Axis.Halt">
      <LineId Id="3" Count="33" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Axis.Home">
      <LineId Id="3" Count="39" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Axis.Home_Velocity.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Axis.Home_Velocity.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Axis.Home2">
      <LineId Id="3" Count="39" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Axis.Home2_Velocity.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Axis.Home2_Velocity.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Axis.Jog_Backward">
      <LineId Id="3" Count="28" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Axis.Jog_Forward">
      <LineId Id="3" Count="28" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Axis.Jog_Velocity.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Axis.Jog_Velocity.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Axis.Max_Turque_Value.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Axis.Move_Absolute">
      <LineId Id="3" Count="21" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Axis.Move_Absolute_Velocity.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Axis.Move_Absolute_Velocity.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Axis.Move_Backward">
      <LineId Id="3" Count="20" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Axis.Move_Fordward">
      <LineId Id="3" Count="20" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Axis.Move_Relative">
      <LineId Id="3" Count="20" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Axis.Move_Relative_Velocity.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Axis.Move_Relative_Velocity.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Axis.Move_Velocity.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Axis.Move_Velocity.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Axis.Power">
      <LineId Id="3" Count="17" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Axis.Proximity_Switch_FeedBack.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Axis.Reset">
      <LineId Id="3" Count="25" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Axis.State_ExtSetPiontDone.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Axis.State_HomeDone.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Axis.State_JogDone.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Axis.State_MoveAbsoluteDone.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Axis.State_PowerStatus.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Axis.State_ResetDone.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>