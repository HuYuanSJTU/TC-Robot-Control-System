<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4020.12">
  <POU Name="Welding_Arm" Id="{ef54a91a-a2b9-4ff8-af0a-04842eab37e4}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM Welding_Arm
VAR
	Axis_Arm			: ARRAY[1..3] OF Axis;				// 定义焊接臂上电机
	Axis_Number 		: INT;								// 定义轴数目
	
	// ===================模块动作信号(按动作先后排列)==========
	Axis_Power			: ARRAY[1..3] OF BOOL;				// 单电机使能
	Arm_Power			: BOOL;								// 机器人所有电机使能
	
	Axis_Home_Set		: ARRAY[1..3] OF BOOL;				// 单电机设定零点信号
	Arm_Home_Set		: BOOL;								// 机器人所有电机设定零点信号		
	
	Axis_Reset			: ARRAY[1..3] OF BOOL;				// 单电机驱动重置信号使能
	Robot_Reset			: BOOL;								// 机器人整体电机驱动重置
	Axis_ResetDone		: ARRAY[1..3] OF BOOL;				// 单电机驱动重置完成
	
	ExtSetPointEnable	: BOOL;								// 外部信号发生信号
	ExtSetPointDisable	: BOOL;								// 外部信号结束信号
	
	// ===================状态监测变量=======================
	Power_Status	: ARRAY[1..3] OF BOOL;					// 上电监测信号
	Home_Done		: ARRAY[1..3] OF BOOL;					// 找零监测信号
	MoveAbsoluteDone: ARRAY[1..3] OF BOOL;					// 电机运动监测信号
	
	Arm_Error		: BOOL;									// 焊接臂电机错误信号
	Axis_Error		: ARRAY[1..3] OF BOOL;					// 电机错误监测信号
	Axis_ErrorID	: ARRAY[1..3] OF UDINT;					// 电机错误号码监测信号
	
	Axis_ActPostion	: ARRAY[1..3] OF LREAL;					// 电机轴实际位置
	Difference_Position	: ARRAY[1..3] OF LREAL;				// 实际位置与输入位置差值
	
	// =======================驱动器信号监测====================
	Current_Turque_Value  AT%IW0 : ARRAY[1..3] OF INT ;		//电流、力矩相关值
	Max_Turque_Value 	: INT ;								// 设置最大力矩边界值
	
	// ====================Simulink模块相关=====================	
	ExSetPoint_Position	: ARRAY[1..3] OF LREAL;			// 外部信号位置	
	Home_Position 		: ARRAY[1..3] OF LREAL;				// Home结束后的位移值
	Model_Position		: ARRAY[1..3] OF LREAL;			// Simulink中各个腿的位置
	Current_Turque_Filter  : ARRAY[1..3] OF LREAL;			// 滤波后的电流值
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// =======================子程序使能(永久运行)===================
Variable_Monitor();			// 变量监测子程序使能
Logic_Control();			// 逻辑控制子程序使能
Variable_Set();				// 各动作速度子程序使能

// =====================电机驱动重置=============================
IF Reset_Execute THEN
	FOR Axis_Number := 1 TO 3 {BY 1} DO
		Axis_Arm[Axis_Number].Reset(Drive_Reset:= Axis_Reset[Axis_Number]);
	END_FOR
END_IF

// =======================电机上电===============================
IF Power_Execute THEN
	Filter_Current.Execute();
	FOR Axis_Number := 1 TO 3 {BY 1} DO
		Axis_Arm[Axis_Number].Power(Axis_Enable:= Axis_Power[Axis_Number]);
	END_FOR
END_IF

// =======================找零程序===============================
IF Home_Execute THEN
	FOR Axis_Number := 1 TO 3 {BY 1} DO
		Axis_Arm[Axis_Number].Home(Drive_Home:= Axis_Home_Set[Axis_Number]);
	END_FOR
END_IF
	
// =======================外部信号运动程序=======================
IF ExSetPoint_Execute THEN
	FOR Axis_Number := 1 TO 3 {BY 1} DO
		Axis_Arm[Axis_Number].ExtSetPoint(	Drive_ExtSetPointEnable:= ExtSetPointEnable, 
											Drive_ExtSetPointDisable:= ExtSetPointDisable, 
											ExSetPosition:= ExSetPoint_Position[Axis_Number]);
	END_FOR
END_IF
]]></ST>
    </Implementation>
    <Action Name="Logic_Control" Id="{90d44aa2-0a7d-4557-957b-d8f32cfa0ee1}">
      <Implementation>
        <ST><![CDATA[// =======================控制逻辑区==========================
// 保证所有的动作拥有合理的先后顺序，优化控制逻辑
// 也防止出现两个或两个以上动作同时进行的情况，保证控制安全

// ===================电机驱动重置逻辑========================
IF Axis_Error[1] OR Axis_Error[2] OR Axis_Error[3] THEN
	Arm_Error := TRUE;
ELSE
	Arm_Error := FALSE;
END_IF
//END_FOR

IF Arm_Error THEN
	Reset_Execute := TRUE;
ELSIF NOT Arm_Error AND NOT Hexapod_Robot.Robot_Error THEN
	Reset_Execute := FALSE;
ELSIF NOT Reset_Execute THEN
	Axis_Reset[Axis_Number] := FALSE;
	Axis_Arm[Axis_Number].Reset(Drive_Reset:= Axis_Reset[Axis_Number]);
END_IF

// =====================上电程序逻辑==========================
IF NOT Power_Execute THEN
	FOR Axis_Number := 1 TO 3 {BY 1} DO
		Axis_Power[Axis_Number] := FALSE;
		Axis_Arm[Axis_Number].Power(Axis_Enable:= Axis_Power[Axis_Number]);
	END_FOR
END_IF

// =====================找零程序逻辑==========================
IF Home_Execute THEN
	FOR Axis_Number := 1 TO 3 {BY 1} DO
		IF Home_Done[Axis_Number] THEN			// 	丝杠到达零点位置后，单电机标零使能位关闭			
			Axis_Home_Set[Axis_Number] :=0;	
			Axis_Arm[Axis_Number].Home(Drive_Home:= Axis_Home_Set[Axis_Number]);
		END_IF
	END_FOR
	ExSetPoint_Execute :=0;
ELSIF NOT Home_Execute THEN
	FOR Axis_Number := 1 TO 3 {BY 1} DO
		//Axis_Start_Back[Axis_Number] :=0;
		Axis_Home_Set[Axis_Number] := 0;
	END_FOR
END_IF

// =====================外部信号发生逻辑========================
IF ExSetPoint_Execute THEN
	Home_Execute := FALSE;						// 外部信号发生使能时，机器人调零必须结束
ELSIF NOT ExSetPoint_Execute THEN
	ExtSetPointEnable := 0;						// 外部信号发生不使能时，外部信号不能进入程序
	ExtSetPointDisable :=0;
ELSIF ExtSetPointDisable THEN
	ExtSetPointEnable :=0;						// 外部信号发生停止与外部信号发生开始不能同时进行
END_IF

IF ExtSetPointEnable THEN	
	//FOR Axis_Number := 1 TO 2 {BY 1} DO
	t := t + t_Interval;
	ExtSetPointDisable := FALSE;
	//END_FOR
END_IF

IF t=0 THEN
	FOR Axis_Number := 1 TO 3 {BY 1} DO
		Home_Position[Axis_Number] := Axis_ActPostion[Axis_Number];
	END_FOR
ELSIF t>=T_ALL THEN
	ExtSetPointEnable := FALSE;
	t:=0;
	ExtSetPointDisable := TRUE;
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="Variable_Monitor" Id="{1d653c13-7351-4675-bf7d-7be856a3b7b0}">
      <Implementation>
        <ST><![CDATA[// =====================关键数据信号监测======================

// ==============最大力矩设置区(边界控制条件)=================
FOR Axis_Number := 1 TO 3 {BY 1} DO
	Axis_Arm[Axis_Number].Max_Turque_Value := Max_Turque_Value;
END_FOR

// =======================力矩检测区==========================
FOR Axis_Number := 1 TO 3 {BY 1} DO
	Axis_Arm[Axis_Number].Current_Turque_Value := Current_Turque_Value[Axis_Number];
END_FOR

// ====================轴实际位置检测区=======================
FOR Axis_Number := 1 TO 3 {BY 1} DO
	Axis_ActPostion[Axis_Number] := Axis_Arm[Axis_Number].ActPosition;
END_FOR

// =======================上电状态检测区======================
FOR Axis_Number := 1 TO 3 {BY 1} DO
	Power_Status[Axis_Number] := Axis_Arm[Axis_Number].State_PowerStatus;
END_FOR

// =======================找零状态检测区======================
FOR Axis_Number := 1 TO 3 {BY 1} DO
	Home_Done[Axis_Number] := Axis_Arm[Axis_Number].State_HomeDone;
END_FOR

// ===================电机绝对运动状态检测区==================
FOR Axis_Number := 1 TO 3 {BY 1} DO
	MoveAbsoluteDone[Axis_Number] := Axis_Arm[Axis_Number].State_MoveAbsoluteDone;
END_FOR

// =======================电机错误检测区======================
FOR Axis_Number := 1 TO 3 {BY 1} DO
	Axis_Error[Axis_Number] := Axis_Arm[Axis_Number].Axis_Error;
	Axis_ErrorID[Axis_Number] := Axis_Arm[Axis_Number].Axis_ErrorID;
END_FOR]]></ST>
      </Implementation>
    </Action>
    <Action Name="Variable_Set" Id="{45559a97-23aa-4154-8e28-abf643046603}">
      <Implementation>
        <ST><![CDATA[// =======================速度规定区==========================
FOR Axis_Number := 1 TO 3 {BY 1} DO						//此时每一个电机的速度都是一样的
	Axis_Arm[Axis_Number].Home_Velocity 	:= 20;			//找零速度(Axis_Jog中的速度)
	Axis_Arm[Axis_Number].Move_Relative_Velocity	:=30;	//相对运动速度
END_FOR
IF Home_Execute THEN
	Axis_Arm[1].Move_Absolute_Velocity :=10; Axis_Arm[2].Move_Absolute_Velocity :=10; Axis_Arm[3].Move_Absolute_Velocity :=10;
ELSE
	FOR Axis_Number := 1 TO 3 {BY 1} DO
			Axis_Arm[Axis_Number].Move_Absolute_Velocity	:= 10;
	END_FOR
END_IF

// =====================最大力矩规定区========================
Max_Turque_Value := 1300;

// ===============电机设置零点后到达位置规定区================
FOR Axis_Number := 1 TO 3 {BY 1} DO
	Axis_Arm[Axis_Number].Home_Absolute_Position := Model_Position[Axis_Number];
END_FOR

// ===================外部信号发生电机位置输入值================
FOR Axis_Number := 1 TO 3 {BY 1} DO
	ExSetPoint_Position[Axis_Number]:= Model_Position[Axis_Number];
END_FOR

// ===================程序与模型的变量链接===================
Robot_Simulink.stInput.t := t;								// 采样时间t与Simulink模型中的采样时间链接
//Model_Position := Robot_Simulink.stOutput.Disp_P;			// Simulink中的电机输出位移输入到控制模型
FOR Axis_Number := 1 TO 3 {BY 1} DO
	Filter_Current.stInput.Current_Motor[Axis_Number-1] := Current_Turque_Value[Axis_Number];
END_FOR	
//Current_Turque_Filter := Filter_Current.stOutput.Current_Monitor;]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="Welding_Arm">
      <LineId Id="119" Count="2" />
      <LineId Id="116" Count="1" />
      <LineId Id="16" Count="15" />
      <LineId Id="33" Count="3" />
      <LineId Id="45" Count="2" />
      <LineId Id="50" Count="6" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="Welding_Arm.Logic_Control">
      <LineId Id="2" Count="3" />
      <LineId Id="7" Count="0" />
      <LineId Id="11" Count="30" />
      <LineId Id="43" Count="6" />
      <LineId Id="68" Count="3" />
      <LineId Id="73" Count="6" />
      <LineId Id="81" Count="15" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="Welding_Arm.Variable_Monitor">
      <LineId Id="2" Count="25" />
      <LineId Id="32" Count="9" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="Welding_Arm.Variable_Set">
      <LineId Id="2" Count="1" />
      <LineId Id="5" Count="1" />
      <LineId Id="35" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="63" Count="3" />
      <LineId Id="45" Count="0" />
      <LineId Id="12" Count="4" />
      <LineId Id="86" Count="2" />
      <LineId Id="26" Count="0" />
      <LineId Id="95" Count="0" />
      <LineId Id="91" Count="2" />
      <LineId Id="81" Count="1" />
      <LineId Id="84" Count="1" />
      <LineId Id="97" Count="2" />
      <LineId Id="89" Count="0" />
      <LineId Id="1" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>